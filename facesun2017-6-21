1:用两个栈实现一个队列
答：栈（satck）实现一个队列
用c++描述
已知下面的stack类以及三个方法Push,Pop,Count,请用2个satck实现Queue类的入队(Enqueue)出队的（Queue）方法
class Stack
{
 ...
 public:
  void Push(int x);//Push an element out of stack;
  int Count()const;//Return the number of the elements in stack;
...

}
class Queue
{
...
public:
  void Enueue(int x);
  int Dequeue();
  
private:
  Stack s1;
  Stack s2;
 ...
}
思路：
始终维护s1作为存储空间，以s2作为临时缓存区
入队时，将元素压入s1
出队时，s1的元素逐个“倒入”（弹出并压入）s2，将s2的顶元素弹出作为出队元素，
之后将s2的剩下的元素逐个倒回s1
栈s1     s2倒入      出队（弹出） 到回  
入栈压入              S2          s2 
Xn      X1           X1          X2
...     X2                       X3     
X3      X3                       ...
X2      ...         
X1      Xn            
问题1
如何减少一次压栈操作
在出队时，在S1栈低1元素不用倒入S2，只需倒入s1.Count（）-1
这样可以减少一次压栈操作
2:mysql如何实现分页查询
(1)使用count（*）的方式
select count(*) from where b = 1;
select a from foo where b = 1 limit 100,10;
（2）调用SQL_CALC_FOUND_ROWS
select SQL_CALC_FOUND_ROWS a from foo where b = 1 limit 100，,10；
select found_rows（）；

理论经典：TCP协议的3次握手与4次挥手过程详解

1、前言

尽管TCP和UDP都使用相同的网络层（IP），TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。

面向连接意味着两个使用TCP的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个TCP连接。这一过程与打电话很相似，先拨号振铃，等待对方摘机说“喂”，然后才说明是谁。

本文将分别讲解经典的TCP协议建立连接（所谓的“3次握手”）和断开连接（所谓的“4次挥手”）的过程。有关TCP协议的权威理论介绍，请参见《TCP/IP详解》这本书。（本文同步发布于：理论经典：TCP协议的3次握手与4次挥手过程详解）

2、学习交流

- 即时通讯开发交流群：215891622 [推荐]

- 移动端IM开发推荐文章：《新手入门一篇就够：从零开发移动端IM》

3、相关资料

《技术往事：改变世界的TCP/IP协议（珍贵多图、手机慎点）》

《TCP/IP详解-第17章·TCP：传输控制协议》

《TCP/IP详解-第18章·TCP连接的建立与终止》

《TCP/IP详解-第21章·TCP的超时与重传》

《通俗易懂-深入理解TCP协议（上）：理论基础》

《通俗易懂-深入理解TCP协议（下）：RTT、滑动窗口、拥塞处理》

《理论经典：TCP协议的3次握手与4次挥手过程详解》

《计算机网络通讯协议关系图（中文珍藏版）》

4、先来认识TCP报文格式

TCP/IP协议的详细信息参看《TCP/IP 协议详解》中有关TCP格式的章节（点此查看《TCP/IP详解 在线版》）。

下面是TCP报文格式图：

 

上图中有几个字段需要重点介绍下：

（1）序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。

（2）确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。

（3）标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：

（A）URG：紧急指针（urgent pointer）有效。

（B）ACK：确认序号有效。

（C）PSH：接收方应该尽快将这个报文交给应用层。

（D）RST：重置连接。

（E）SYN：发起一个新连接。

（F）FIN：释放一个连接。

需要注意的是：

（A）不要将确认序号Ack与标志位中的ACK搞混了。

（B）确认方Ack=发起方Req+1，两端配对。

5、3次握手过程详解

所谓三次握手（Three-Way Handshake）即建立TCP连接，就是指建立一个TCP连接时，需要客户端和服务端总共发送3个包以确认连接的建立。在socket编程中，这一过程由客户端执行connect来触发，整个流程如下图所示：

 

（1）第一次握手：

Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。

（2）第二次握手：

Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。

（3）第三次握手：

Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。

SYN攻击：

在三次握手过程中，Server发送SYN-ACK之后，收到Client的ACK之前的TCP连接称为半连接（half-open connect），此时Server处于SYN_RCVD状态，当收到ACK后，Server转入ESTABLISHED状态。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server回复确认包，并等待Client的确认，由于源地址是不存在的，因此，Server需要不断重发直至超时，这些伪造的SYN包将产时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络堵塞甚至系统瘫痪。SYN攻击时一种典型的DDOS攻击，检测SYN攻击的方式非常简单，即当Server上有大量半连接状态且源IP地址是随机的，则可以断定遭到SYN攻击了，使用如下命令可以让之现行：

#netstat -nap | grep SYN_RECV

6、4次挥手过程详解

三次握手耳熟能详，四次挥手估计就少有人知道了。所谓四次挥手（Four-Way Wavehand）即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。在socket编程中，这一过程由客户端或服务端任一方执行close来触发，整个流程如下图所示：

 

由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭，上图描述的即是如此。

第一次挥手：

Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。

第二次挥手：

Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。

第三次挥手：

Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。

第四次挥手：

Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。

上面是一方主动关闭，另一方被动关闭的情况，实际中还会出现同时发起主动关闭的情况，具体流程如下图：

 

流程和状态在上图中已经很明了了，在此不再赘述，可以参考前面的四次挥手解析步骤。

结语










